Tests:
 ☐ Add tests for get methods of structs. @created(23-07-21 17:44)

Misc:
 ☐ Add support for group imports like this: @created(23-07-17 18:59)
   'from mypy.nodes import ('
   '    ARG_NAMED,'
   '    ARG_POS,'
   '    ARG_STAR,'
   '    ARG_STAR2,'
   ')'
 ☐ Add support for multiline global variable initializations like this: @created(23-07-17 19:25)
   '    __all__ = ['
   '        'exceptions', 'ModuleDeprecationWarning', 'VisibleDeprecationWarning','
   '        'ComplexWarning', 'TooHardError', 'AxisError']'
 ☐ Change from looping over characters to looping over grapheme clusters where applicable. @created(23-07-20 16:24)
 ☐ Change unwraps to expects to avoid panicking without any description. @created(23-07-23 13:22)
 ✔ Implement a function for checking if some string is a function call. @created(23-08-22 10:51) @done (23-09-02 01:42)
 ☐ Implement a function for getting the function arguments from a function call. @created(23-08-22 10:52)
 ☐ Implement a function for getting all variable/function names used in a function call. @created(23-08-22 10:53)
 ☐ Implement a function for getting all variable/function names used in an assignment left side. @created(23-08-22 11:21)
 ☐ Implement a function for getting all variable/function names used in an assignment right side. @created(23-08-22 11:21)
 ☐ Add support for the 'in' keyword not in a for loop. @created(23-09-02 13:40)
 ☐ Add support for the 'not' keyword. @created(23-09-02 13:41)
 ☐ Add support for f-strings. @created(23-09-02 13:41)
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
 ✔ Detect multiline comments ('''/""") and ignore them, it is only a comment if the line is not an assignment. (Any code before start/after end """ on the same line is invalid, except for comments which are valid after the closing """. Also comments with """ cannot be part of a normal line.) (Single quotations also work apparantly.) @created(23-07-26 14:03) @done (23-07-28 18:27) @project(Misc)
 ✔ Detect single line comments (#) and ignore them. @created(23-07-26 13:21) @done (23-07-28 18:26) @project(Misc)
 ✔ Add tests to check that regex patterns do not match when they should not match. @created(23-07-23 19:04) @done (23-07-26 13:21) @project(Tests)
 ✔ Implement writing to a generic stream instead of the standard output (I can redirect the generic stream to standard output anyway). @created(23-07-24 15:14) @done (23-07-25 22:42) @project(Misc)
 ✔ Remove empty lines at the start of File::new(), Class::new(), and Function::new(), or rework them all to check for empty lines in the source lines loop. (I chose to remove empty lines at the start of the constructor methods.) @created(23-07-23 19:36) @done (23-07-23 20:39) @project(Misc)
 ✔ Implement Class::default() method and implement return default() class if the class definition does not match. @created(23-07-23 19:38) @done (23-07-23 20:31) @project(Misc)
 ✔ Change name and parent match to a let match statement in Class::new(). @created(23-07-23 19:37) @done (23-07-23 20:31) @project(Misc)
 ✔ Add tests to verify that the filepath passed to the File::new() method is actually a path to avoid panicking. (I matched the extension instead.) @created(23-07-23 13:39) @done (23-07-23 20:23) @project(Tests)
 ✔ Change global variables in file from String to Assignment. @created(23-07-21 17:44) @done (23-07-21 18:06) @project(Tests)
 ✔ Create struct method Function::default() after merging Function and ClassMethod, used for handling error cases in the Function struct a little bit cleaner. @created(23-07-17 16:26) @done (23-07-21 17:41) @project(Misc)
 ✔ Fix bug where a function parameter of '  p5=3  ' gets changed to 'p5=3', but '    p5  =    3   ' gets changed to 'p5 = 3' (in Function::create). @created(23-07-17 11:04) @done (23-07-20 16:46) @project(Misc)
 ✔ Class in the middle of file with no empty line after. @created(23-07-12 14:54) @done (23-07-20 16:45) @project(Tests)
 ✔ Class at end of file with no new line. @created(23-07-12 14:54) @done (23-07-20 16:29) @project(Tests)
 ✔ Function in the middle of file with no empty line after. @created(23-07-12 14:51) @done (23-07-20 16:28) @project(Tests)
 ✔ Function at end of file with no new line. @created(23-07-12 14:50) @done (23-07-20 16:17) @project(Tests)
 ✔ Update all regexes to accept spaces/tabs like this: @created(23-07-13 22:32) @done (23-07-20 16:10) @project(Misc)
  'def        funcname    (par1    ,       par2  ,     *args)   :    '
  'class   Rect      (object)   :   '
  (done when tested)
 ✔ Attempt to merge Function and ClassMethod, as those are essentially the same thing. @created(23-07-17 11:13) @done (23-07-20 16:07) @project(Misc)
 ✔ Remove source field from class Class, as it is pretty much contained in the name, parent, variables, and functions (and possibly eventually also subclasses). @created(23-07-13 11:09) @done (23-07-20 16:06) @project(Misc)
 ✔ Test regexes at the top of lib.rs. @created(23-07-17 10:32) @done (23-07-17 21:35) @project(Tests)
